name: Quality Checks

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: "20"

jobs:
  code_quality:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    outputs:
      formatted: ${{ steps.format-check.outputs.formatted }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: Cache ESLint
        uses: actions/cache@v4
        with:
          path: .eslintcache
          key: eslint-cache-${{ runner.os }}-${{ hashFiles('**/.eslintrc.*', '**/eslint.config.*') }}

      - name: Run TypeScript check
        run: npm run type-check || npx tsc --noEmit

      - name: Run ESLint
        run: npm run lint -- --cache --cache-location .eslintcache

      - name: Check Prettier formatting
        id: format-check
        run: |
          if ! npx prettier --check "src/**/*.{js,jsx,ts,tsx}" "*.{js,ts,json,md}" "public/**/*.html"; then
            echo "formatted=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "formatted=false" >> $GITHUB_OUTPUT
          fi

      - name: Apply Prettier formatting
        if: failure() && steps.format-check.outputs.formatted == 'true'
        run: npx prettier --write "src/**/*.{js,jsx,ts,tsx}" "*.{js,ts,json,md}" "public/**/*.html"

      - name: Commit formatted files
        if: failure() && steps.format-check.outputs.formatted == 'true' && github.event_name == 'push'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "style: apply automatic Prettier formatting [skip ci]"
          file_pattern: "src/**/*.{js,jsx,ts,tsx} *.{js,ts,json,md} public/**/*.html"

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code_quality
    if: always() && (needs.code_quality.result == 'success' || needs.code_quality.outputs.formatted == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: code_quality
    if: always() && (needs.code_quality.result == 'success' || needs.code_quality.outputs.formatted == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Check build size
        run: |
          echo "### üì¶ Build Size Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/* >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 7

  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate || echo "Security issues found, check output above"

      - name: Check for outdated packages
        run: |
          echo "### üìã Outdated Packages Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm outdated >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Resumen final
  quality_gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code_quality, tests, build, security]
    if: always()

    steps:
      - name: Check results
        run: |
          echo "### üéØ Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code_quality.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.tests.result == 'success' && '‚úÖ Passed' || (needs.tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || (needs.build.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Fail if critical checks failed
        if: needs.code_quality.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Critical quality checks failed!"
          exit 1
